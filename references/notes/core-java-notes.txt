History
	- project started on 1991
	- James Gosling, Mike Sheridan, Patrick Naughton
	- v1.0 -> 1996
	- 2006/07 -> JVM -> FOSS (Free & Open Source Software)
	- 2009/10 -> Oracle acquired Sun Microsystems and become owner of Java
	- latest version 18
	- Oracle JDK
	- Open JDK
	
Design Goals
	- simple, object oriented, familiar
	- robust and secure
	- architectural neutral and portable
	- high performance (JIT)
	- interpreted, threaded and dynamic
	
Release
	- v1.0 -> 1996
	- v1.1 -> 1997
	- v1.2 -> 1998	=> J2SE, J2EE, J2ME
	- v1.3 -> 2000
	- v1.4 -> 2002
	- v5.0 -> 2004	=> JSE, JEE, JME
	- v6.0 -> 2006
	- v7.0 -> 2011
	- v8.0 -> 2014 (LTS) => OOP + FP (Lambda Expr + Stream API)
	- v9.0 -> 2017
	- v10  -> 2018(Mar)
	- v11  -> 2018(Sep) (LTS)
	- v12  -> 2019(Mar)
	- v13  -> 2019(Sep)
	- v14  -> 2020(Mar)
	- v15  -> 2020(Sep)
	- v16  -> 2021(Mar)
	- v17  -> 2021(Sep) (LTS)
	- v18  -> 2022(Mar)
	- v19  -> 2022(Sep)
        - v20  -> 2023(Mar)
	
JDK vs JRE vs JVM

Java Editions
	- Java SE (Standard Edition)
	- Java EE (Enterprise Edition)
	- Java ME (Micro Edition)
	
Language Constructs
	- Data Types
		- byte	(1 byte)
		- short	(2 bytes)
		- int	(4 bytes)
		- long	(8 bytes)		
		- float	(4 bytes)
		- double (8 bytes)		
		- boolean (1 byte)		
		- char	(1 bytes)
			
		- string
		
		
	- Variables
		- Primitive - int, float, double, char, boolean, etc...
		- Non-Primitive (Reference) - String, Array, Object
		
	- Constants
		- final int ID;
		
	- Operators
		- Arithmetic Operators
		- Relational Operators
		- Bitwise Operators
		- Assignment Operators
		- Conditional Operators 
		- instanceof operator
		
	- Expressions, Statements, Blocks
		- statements should end with semicolon ;
		- blocks will be created with set of {}
		
	- Control Flow Statements
		- IF ELSE
		- Switch
		
	- Loop Statements
		- while
		- do...while
		- for
		- foreach
		
		while(true) {
		}
		
		for(int i =0; i < 10; i++) {}
		
		for(;;){}
		
		for(String item: items) {}
		
	- Branching Statements
	- Naming Conventions
		- starts with $, _ and alphabets
		- can contain numbers
		
	- Comments
		- single line => //
		- multi line => /* */
		- class comment => /** */
		
	- Arrays
		- int[] ids;
		- int ids[];
		
		- int[] ids = {10,20,30}
		
		- String[] ids = new String[10];
			ids[0] = 10;
			ids[1] = 20;
			ids[2] = 30;
		
	- Strings
		- String name = new String("Lowes");
		- String company = new String("Lowes")
		
		- String name = "Lowes" + "Inc"
		- String company = "Lowes"
		
		- String Buffer vs String Builder
		
		- StringBuffer name = new StringBuffer("Lowes")
		name.toString()
		
		- company = new StringBuffer("Lowes")
	
Object Oriented Programming
	- Class
		- Template or Blueprint
		
	- Object
		- Instance of a class
		
	- Abstraction
		- showing up only essentials details
		- abstract class
		- can't instantiate
		- extending class should provide implementation for all abstract methods
	
	- Encapsulation
		- data hiding
		- access modifiers
		- default, private, protected, public
		
	- Inheritance
		- acquiring/inheriting state and behavior from parent class
		- multi level inheritance supported
		- using extends
		- multiple inheritance is not supported due to ambiguity during run time
		- with interfaces can support multiple inheritance
		
	- Polymorphism
		- ability to take multiple forms
		- overloading   - compile time (static) polymorphism
		- overriding	- runtime polymorphism
	
	- Interface
		- contract b/w class and outside world
		- contain only abstract methods
		- constants
		- using implements
		- marker interfaces - no method declarations
		
	- Object
		- base/root class
		- hashCode()
		- equals()
		- toString()
			
Reference: https://docs.oracle.com/javase/tutorial/		
	
[Appendix]
Class Libraries
	- Language Libraries
	- Generics
	- Collection Libraries
	- Functional Programming
	- Concurrency	
	- IO/NIO
	- Networking
	- Reflection
	- XML Processing
	- Security
	- Internalization and Localization
	
	- JDBC
	- JNDI
	- RMI and CORBA
	- JMX
	
	- AWT
	- Swing
	- JavaFX
	
Java Tools
	[Basic Tools]
	- java		-> launcher for Java applications
	- javac		-> compiler for the Java programming language
	- javadoc	-> API documentation generator
	- jar		-> create and manage Java Archive (JAR) files
	- javap		-> class file disassembler
	- jdeps		-> java class dependency analyzer
	[Monitoring & Management]
	- jcmd		-> JVM Diagnostic Commands tool - Sends diagnostic command requests to a running Java Virtual Machine
	- jconsole	-> graphical tool for monitoring a Java virtual machine
	- visualvm	-> provides memory and CPU profiling, heap dump analysis, memory leak detection, access to MBeans, and garbage collection
	- jmc		-> java mission control -  includes tools to monitor and manage your Java application without introducing the performance overhead
	- jps		-> JVM Process Status Tool - Lists instrumented HotSpot Java virtual machines on a target system
	- jstat		-> JVM Statistics Monitoring Tool - Attaches to an instrumented HotSpot Java virtual machine and collects and logs performance statistics
	- jinfo		-> prints configuration information for a given process
	- jmap		-> prints shared object memory maps or heap memory details of a given process
	- jhat		-> starts a web server on a heap dump file (for example, produced by jmap -dump), allowing the heap to be browsed
	- jstack	-> prints a stack trace of threads for a given process	
	
	[Scripting]
	- jjs		-> runs the Nashorn command-line script shell
	
Garbage Collectors
	- Serial Garbage Collector [Single threaded. Freezes all app threads during GC]
	- Parallel Garbage Collector [Multi threaded. Freezes all app threads during GC]
	- Concurrent Mark Sweep [Multi threaded with shorter GC pauses]
	- G1 Garbage Collector [Divides heap space into many regions and GCs region have more garbage]