		
Collections
	- An object that groups multiple elements into a single unit. Collections are used to store, retrieve, manipulate, and communicate aggregate data.
	- A collections framework is a unified architecture for representing and manipulating collections
	
	[Collection Framework]
	- Interfaces - Collection, Set, List, Queue, Deque, Map
	- Implementations - ArrayList, LinkedList, HashSet, TreeSet, LinkedHashSet, ArrayDeque, HashMap, TreeMap, LinkedHashMap
	- Algorithms - Sorting, Shuffling, Searching, Data Manipulation, Composition, Min/Max
	
	[Benefits]
	- Reduces Programming Effort
	- Increases Program Speed and Quality
	- Allows interoperability among unrelated APIs
	- Reduces effort to learn and to use new APIs
	- Reduces effort to design new APIs
	- Fosters software reuse
	
	Arrays
		- Fixed size
		- Sequential memory allocation
		
	Vector
		- Dynamic Array
		- Synchronized. Thread Safe
		
	Hashtable
		- Key Value store (Objects)
		- Synchronized. Thread Safe
		
	Properties
		- Key Value store (String)
		
	List - indexed and ordered
		- Vector
		- ArrayList
		- LinkedList
			
	Set - maintains unique values and sorted
		- TreeSet
		- HashSet
		- LinkedHashSet
			
	Map - key value store
		- TreeMap
		- HashMap
		- LinkedHashMap
			
	Queue - FIFO
		- PriorityQueue
		- Deque	
		
Collections Framework Hierachy
	
	- Iterable
		- Collection
			- List - dynamic sizing, ordered, index based, supports 
				- Vector - synchronized
				- ArrayList - faster frequent reads, random access
				- LinkedList - frequent insertions and updations
			- Set - not allows duplicates, sorted, no index
				- HashSet - faster search, works based on hashing techinque, not ordered/sorted, allows null values
				- TreeSet - sorting, not allows null values
					- Comparable
						- compareTo(object ob)
					- Comparator
						- compare(Object ob1, Objec ob2)
				- LinkedHashSet - ordered, maintains insertion order					
			- Queue - FIFO
				-Deque
					- PriorityQueue
					- BlockingQueue
					
	- Map - maintains data as key, value pair, not allows duplicate keys
		- Hashtable -  not allows null keys, values
		- HashMap	- allows null keys and values
		- TreeMap	- not allows null keys and allows null values
		- LinkedHashMap -  allows null keys and values		
	
Generics
	- Stronger type checks at compile time
	- Elimination of casts
	- Enabling programmers to implement generic algorithms
	- Type Parameter Naming Convention
		E - Element (used extensively by the Java Collections Framework)
		K - Key
		N - Number
		T - Type
		V - Value
		S,U,V etc. - 2nd, 3rd, 4th types
	
Annotations
	-Annotations, a form of metadata, provide data about a program that is not part of the program itself
	
	[Use cases]
	- Information for the compiler
	- Compile-time and deployment-time processing
	- Runtime Processing
	
	[Predefined Annotations]
	- @Deprecated
	- @Override
	- @SuppressWarnings
	- @SafeVarArgs
	- @FunctionalInterface
	[Custom Annotations]
	[Meta Annotations]
	- @Documented
	- @Inherited
	- @Retention
	- @Target
	- @Repeatable

Java I/O
	- An I/O Stream represents an input source or an output destination. A stream can represent many different kinds of sources and destinations, including disk files, devices, other programs, and memory arrays
	- Byte Stream -> Programs use byte streams to perform input and output of 8-bit bytes
	- Character Stream -> Java platform stores character values using Unicode conventions. Character stream I/O automatically translates this internal format to and from the local character set. 
	- Buffered Stream -> Buffered input streams read data from a memory area known as a buffer; the native input API is called only when the buffer is empty. Similarly, buffered output streams write data to a buffer, and the native output API is called only when the buffer is full.
		- Flushing Buffer Stream to sync write with native file sys
	- Scanning and Formatting
	- I/O from command line
	
	- File I/O
		ByteStream 
			- FileInputStream
			- FileOutputStram
		CharacterStream
			- FileReader
			- FilerWriter
		BufferedStream
			- BufferedReader
			- BufferedWriter
			- BufferedInputStream
			- BufferedOutputStream
			
	- Console I/O
		Scanner
		Console
		BufferedReader
		
	- Serialization / De-serialization
		ObjectOutputStream
		ObjectInputStream	

	
Multi-threading and Concurrency API
	- Concurrent Programming Overview
	- Process vs Threads
	- Thread Creation
		- Extend Thread
		- Implement Runnable
		- Implement Callable
		
	- Thread Lifecycle
		- New -> Runnable -> Running -> Sleep -> Runnable
		- New -> Runnable -> Running -> Waiting -> Notify -> Runnable
		- New -> Runnable -> Running -> Blocked -> Acquire Lock -> Runnable
		- New -> Runnable -> Running -> Dead
	
	- Thread Constructs
		- sleep - holds lock and put the thread to sleep state until the time elapses
		- wait - release locks and put the thread to wait state until receive notification
		- notify - sends notification to the waiting threads
		- notifyAll - sends notification to all the waiting threads
		- join - makes parent thread to wait until child thread terminates
		- interrupt - interrupts the thread execution
		- yield - gives the chance for other threads to runs
		- volatile - transient shared variable		
		- synchronized <- Thread Interference, Memory Inconsistency
		- Thread Synchronization
		- Thread Liveness
			- Starvation
			- DeadLock
		- Concurrency API	
			- Callable
			- Executors 
			- Thread Pool
			- Future
			
			- ForkJoin Framework
			- CompleteableFuture
			
			- Concurrent Collections
			- Locks and Conditions
			- Atomic
		
Reference: https://docs.oracle.com/javase/tutorial/			
